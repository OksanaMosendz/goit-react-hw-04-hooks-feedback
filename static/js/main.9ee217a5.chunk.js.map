{"version":3,"sources":["components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/App.jsx","index.js"],"names":["Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Button","styled","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Section","title","children","App","useState","setGood","setNeutral","setBad","countTotalFeedback","positiveFeedbackPercentage","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAEaA,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,4BAAIA,KCDAC,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,+BACE,uCACO,+BAAOJ,OAEd,0CACU,+BAAOC,OAEjB,sCACM,+BAAOC,OAEb,wCACQ,+BAAOC,OAEf,oDACoB,iCAAOC,EAAP,c,OCtBbC,E,KAASC,EAAOC,OAAV,mDCANC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACzC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,cAACP,EAAD,CAAQQ,KAAK,SAAsBC,QAAS,kBAAMJ,EAAgBE,IAAlE,SACGA,GADwBA,OCFlBG,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,oCACE,6BAAKD,IACJC,MCAMC,EAAM,WACjB,MAAwBC,mBAAS,GAAjC,mBAAOnB,EAAP,KAAaoB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOlB,EAAP,KAAgBoB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOjB,EAAP,KAAYoB,EAAZ,KAkBMC,EAAqB,WACzB,OAAOvB,EAAOC,EAAUC,GAU1B,OACE,qCACE,cAAC,EAAD,CAASc,MAAM,wBAAf,SACE,cAAC,EAAD,CACEP,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAhCc,SAAAE,GACpB,OAAQA,GACN,IAAK,OACHQ,EAAQpB,EAAO,GACf,MACF,IAAK,UACHqB,EAAWpB,EAAU,GACrB,MACF,IAAK,MACHqB,EAAOpB,EAAM,GACb,MACF,QACE,aAwBDqB,IACC,cAAC,EAAD,CAASP,MAAM,aAAf,SACE,cAAC,EAAD,CACEhB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,IACPnB,mBAvB8B,WACtC,IAAMoB,EAA6BC,KAAKC,MAC9B,IAAP1B,EAAcuB,KAEjB,OAAOC,GAA0D,IAmBrCG,OAIxB,cAAC,EAAD,CAAc7B,QAAQ,0BCtD9B8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9ee217a5.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport const Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) => {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        Good:<span>{good}</span>\r\n      </li>\r\n      <li>\r\n        Neutral:<span>{neutral}</span>\r\n      </li>\r\n      <li>\r\n        Bad:<span>{bad}</span>\r\n      </li>\r\n      <li>\r\n        Total:<span>{total}</span>\r\n      </li>\r\n      <li>\r\n        Positive feedback:<span>{positivePercentage}%</span>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Button = styled.button`\r\n  margin-right: 10px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Button } from './FeedbackOptions.styled';\r\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return options.map(option => (\r\n    <Button type=\"button\" key={option} onClick={() => onLeaveFeedback(option)}>\r\n      {option}\r\n    </Button>\r\n  ));\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import React, { useState } from 'react';\nimport { Notification } from './Notification/Notification';\nimport { Statistics } from './Statistics/Statistics';\nimport { FeedbackOptions } from './FeedbackOptions/FeedbackOptions';\nimport { Section } from './Section/Section';\n\nexport const App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const leaveFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(good + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n      case 'bad':\n        setBad(bad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const positiveFeedbackPercentage = Math.round(\n      (good * 100) / countTotalFeedback(),\n    );\n    return positiveFeedbackPercentage ? positiveFeedbackPercentage : '0';\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={leaveFeedback}\n        />\n      </Section>\n\n      {countTotalFeedback() ? (\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}